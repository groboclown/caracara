// Helper utilities for op-codes.

import { VM_MEMORY_STRUCTURE_CORRUPT, VM_INSTRUCTION_ORDER_VIOLATION, ERROR__USER__TYPE_MISMATCH, VM_BUG_UNKNOWN_PRIMARY_TYPE, VALIDATION_OPCODE_ARGUMENT_COUNT, VALIDATION_OPCODE_ARGUMENT_TYPE, VALIDATION_OPCODE_ARGUMENT_REF, RuntimeError } from "../errors"

// ensureTypesMatch Is the actual type of the given expected type?
//    Returns an error if they do not match, and null if they do.
export function ensureTypesMatch(
    source: RuntimeSource, expected: VmType, actual: VmType
): RuntimeError | null {
    const ret = innerTypeMatch(source, expected, actual, {})
    if (ret !== null) {
        ret.parameters = {
            ...(ret.parameters || {}),
            checkedExpected: expected.name,
            checkedActual: actual.name,
        }
    }
    return ret
}

// isTypeMatch Is the actual type of the given expected type?
function innerTypeMatch(
    source: RuntimeSource,
    expected: VmType, actual: VmType,
    alreadyChecked: {[typePair: string]: boolean},
): RuntimeError | null {
    // Rules of types:
    //   - The name is unique.  So if the names are the same, then it's the
    //     same type.
    //   - For types to be matchable, they must both be of the same top-level type.
    //     (simple, iterable, structured, or callable).
    //   - For types containing other types, recursive definitions are assumed to
    //     be the same.
    //        Example:
    //           Node: { left: Node, right: Node } is one type.
    //           Directions: { left: Directions, right: Directions } is another type.
    //           They would be considered equivalent. when left and right are checked,
    //             they are on a type that's already being checked, and they're checked
    //             against the same type.
    //   - For simple types, the internal type name must be the same.
    //   - For iterable types, the value types must be the same.
    //     (If these ever include length in the type, then it must also match.
    //     Note that length in the type is very different from length in the value,
    //     where one has a static length and the other has a variable length.)
    //   - For structured types, the system uses prototyping.  Therefore, the
    //     actual type must have all the keys with equivalent types as the expected
    //     type.
    //   - For callable types, the call signatures must match.  That means the
    //     both must match their arguments type and their return type.

    // Implementation note: the error returned by createTypeMismatchError can
    //   have the parameters amended, but recursive calls into innerTypeMatch
    //   must never be augmented; that's due to possible bubbling up overwriting
    //   the source's original values.

    // ==============================================
    //   - The name is unique.  So if the names are the same, then it's the
    //     same type.
    if (expected.name === actual.name) {
        return null
    }


    // ==============================================
    //   - For types to be matchable, they must both be of the same top-level type.
    //     (simple, iterable, structured, or callable).

    // alreadyChecked is a mutable type that is added to.  This prevents
    //   needing to recheck all the pairs in a search.
    //   The key is the value "(actual)!(expected)".  The value is always true or undefined.

    const key = `${actual.name}!${expected.name}`
    if (alreadyChecked[key] !== undefined) {
        // This was already checked, or previously tried to be checked and
        //   recursion led us back here.
        return null
    }

    // Mark the pair as checked.  This prevents while-visiting recursion from
    //   causing an infinite loop.  The default is that they're equal.
    alreadyChecked[key] = true
    // In the case of a check returning false, all further checking is halted and false
    //   is returned, so there's no need to change it if a false is detected.  That would
    //   be useful if we want to cache these checks in memory for future validation speedups.

    //   - For types to be matchable, they must both be of the same top-level type.
    //     (simple, iterable, structured, or callable).

    if (isVmSimpleType(actual)) {
        if (!isVmSimpleType(expected)) {
            return createTypeMismatchError(source, expected, actual)
        }
        //   - For simple types, the internal type name must be the same.
        if (actual.internalType !== expected.internalType) {
            return createTypeMismatchError(source, expected, actual)
        }
        return null
    }

    if (isVmIterableType(actual)) {
        if (!isVmIterableType(expected)) {
            return createTypeMismatchError(source, expected, actual)
        }
        //   - For iterable types, the value types must be the same.
        return innerTypeMatch(source, expected.valueType, actual.valueType, alreadyChecked)
    }

    if (isVmStructuredType(actual)) {
        if (!isVmStructuredType(expected)) {
            return createTypeMismatchError(source, expected, actual)
        }
        //   - For structured types, the system uses prototyping.  Therefore, the
        //     actual type must have all the keys with equivalent types as the expected
        //     type.
        for (const key of Object.keys(expected.stores)) {
            const actualKey = actual.stores[key]
            if (actualKey === undefined) {
                // actual doesn't define this key.  It's incompatible.
                // Augment the error message with the specifics.
                const ret = createTypeMismatchError(source, expected, actual)
                ret.parameters = {
                    ...(ret.parameters || {}),
                    missingKey: key,
                    missingKeyType: expected.stores[key].valueType.name,
                }
                return ret
            }
            const keyTypeMatch = innerTypeMatch(source, expected.stores[key].valueType, actualKey.valueType, alreadyChecked)
            if (keyTypeMatch !== null) {
                // Do not augment the returned value.
                return keyTypeMatch
            }
        }
        // The actual may have more keys, but that's okay.
        return null
    }

    if (isVmCallableType(actual)) {
        if (!isVmCallableType(expected)) {
            return createTypeMismatchError(source, expected, actual)
        }

        // check return type
        const returnMatch = innerTypeMatch(source, expected.returnType, actual.returnType, alreadyChecked)
        if (returnMatch !== null) {
            // Return types don't match.  Return the problem.
            //   Do not augment the error.
            return returnMatch
        }
        // check arguments type
        //   It's the last thing to check for this type, so just return it directly.
        return innerTypeMatch(source, expected.argumentTypes, actual.argumentTypes, alreadyChecked)
    }

    // Invalid state.
    return {
        source,
        errorId: VM_BUG_UNKNOWN_PRIMARY_TYPE,
        parameters: {
            actual: actual.name,
        }
    } as RuntimeError
}

// createTypeMismatchError Create a type mismatch error.
function createTypeMismatchError(source: RuntimeSource, expected: VmType, actual: VmType): RuntimeError {
    return {
        source,
        errorId: ERROR__USER__TYPE_MISMATCH,
        parameters: {
            expected: expected.name,
            actual: actual.name,
        }
    } as RuntimeError
}
